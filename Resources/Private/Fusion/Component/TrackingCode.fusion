prototype(Carbon.Plausible:Component.TrackingCode) < prototype(Neos.Fusion:Component) {
    enable = ${Configuration.setting('Carbon.Plausible.enable')}
    doNotTrack = ${q(node).is('[instanceof Carbon.Plausible:Mixin.DoNotTrack]') && q(node).property('plausibleDoNotTrack')}

    hasCustomEventMixin = ${q(node).is('[instanceof Carbon.Plausible:Mixin.CustomEvent]')}
    eventName = ${this.hasCustomEventMixin ? q(node).property('plausibleCustomEventName') : null}
    eventJSON = ${this.eventName ? String.trim(q(node).property('plausibleCustomEventJSON')) : null}

    defaultSettings = ${Configuration.setting('Carbon.Plausible.default')}
    siteName = ${site.name}
    siteSettings = ${Configuration.setting('Carbon.Plausible.sites')}
    siteSettings.@process.isDefined = ${this.siteName && Type.isArray(value) && Type.isArray(value[this.siteName]) ? value[this.siteName] : this.defaultSettings}

    host = ${this.siteSettings.host || this.defaultSettings.host}
    domain = ${this.siteSettings.domain || this.defaultSettings.domain}
    outboundLinks = ${Type.isBoolean(this.siteSettings.outboundLinks) ? this.siteSettings.outboundLinks : this.defaultSettings.outboundLinks}
    hashBasedRouting = ${Type.isBoolean(this.siteSettings.hashBasedRouting) ? this.siteSettings.hashBasedRouting : this.defaultSettings.hashBasedRouting}
    exclusions = ${this.siteSettings.exclusions || Type.isBoolean(this.siteSettings.exclusions) ? this.siteSettings.exclusions : this.defaultSettings.exclusions}
    customEvents = ${this.siteSettings.customEvents || Type.isBoolean(this.siteSettings.customEvents) ? this.siteSettings.customEvents : this.defaultSettings.customEvents}
    dataAnalyticsTracking = ${this.siteSettings.dataAnalyticsTracking || this.defaultSettings.dataAnalyticsTracking}

    async = false
    defer = true

    checkIfDomainIsTheSameAsRequest = true

    renderPlausibleScriptTag = ${this.enable && !this.doNotTrack && this.domain && !node.context.inBackend && (this.checkIfDomainIsTheSameAsRequest ? Carbon.Plausible.checkDomain(request.httpRequest, this.domain) : true)}
    renderInlineScriptTag = ${this.renderPlausibleScriptTag}

    @if.renderTags = ${this.renderPlausibleScriptTag || this.renderInlineScriptTag}

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}

        dataExclude = ${Type.isString(props.exclusions) ? props.exclusions : Array.join(props.exclusions, ',')}
        dataExclude.@if {
            exclusionIsSet = ${props.exclusions}
            isStringOrArray = ${Type.isString(props.exclusions) || (Type.isArray(props.exclusions) && Array.length(props.exclusions))}
        }

        inlineJavascript = Neos.Fusion:DataStructure {
            plausibleVariable = 'window.plausible = window.plausible || function() { (window.plausible.q = window.plausible.q || []).push(arguments) }'
            eventFromNode = ${'plausible("' + props.eventName + '"' + (props.eventJSON ? ',' + props.eventJSON : '') + ')'}
            eventFromNode.@if.hasEventName = ${props.eventName}
            customEvents = ${Type.isString(props.customEvents) ? props.customEvents : null}
            @if.set = ${props.renderInlineScriptTag && (props.customEvents || props.eventName || props.dataAnalyticsTracking)}
            @process.filter = ${Array.join(Array.filter(value, line => !!line), ';')}
        }

        plausibleSrc = Carbon.Plausible:Component.Src {
            @apply.props = ${props}
        }
        dataAnalyticsTrackingSrc = Neos.Fusion:ResourceUri {
            @if.set = ${props.renderInlineScriptTag && props.dataAnalyticsTracking}
            path = 'resource://Carbon.Plausible/Public/Data.js'
        }

        renderer = afx`
            <script
                @if.set={props.renderPlausibleScriptTag}
                src={props.plausibleSrc}
                data-domain={props.domain}
                data-exclude={props.dataExclude}
                async={props.async}
                defer={props.defer}
            ></script>
            <script @if.set={props.inlineJavascript}>
                {Carbon.Plausible.minifyJS(props.inlineJavascript)}
            </script>
            <script
                @if.set={props.dataAnalyticsTrackingSrc}
                src={props.dataAnalyticsTrackingSrc}
                defer
            ></script>
        `
    }
}
